# SPDX-FileCopyrightText: 2015-2023 Alexey Rochev
#
# SPDX-License-Identifier: CC0-1.0

name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        container-image: ['fedora:37', 'fedora:38', 'opensuse/tumbleweed:latest', 'mageia:8', 'debian:11', 'debian:12', 'ubuntu:22.04', 'ubuntu:23.04']
        qt-version: [5, 6]
        compiler: [gcc, clang]
        exclude:
        - container-image: 'mageia:8'
          qt-version: 6
          compiler: gcc
        - container-image: 'mageia:8'
          qt-version: 6
          compiler: clang
        - container-image: 'debian:11'
          qt-version: 6
          compiler: gcc
        - container-image: 'debian:11'
          qt-version: 6
          compiler: clang

    env:
      RPM_PACKAGES: git cmake 'cmake(Qt${{matrix.qt-version}}Core)' 'cmake(Qt${{matrix.qt-version}}Concurrent)' 'cmake(Qt${{matrix.qt-version}}Network)' 'cmake(Qt${{matrix.qt-version}}Test)' 'cmake(fmt)' 'pkgconfig(libpsl)' openssl-devel pkgconf ${{ matrix.compiler == 'gcc' && 'gcc-c++' || 'clang' }} ${{ startsWith(matrix.container-image, 'opensuse') && 'ninja' || 'ninja-build' }} ${{ startsWith(matrix.container-image, 'fedora') && '''cmake(httplib)''' || '' }}
      DEB_PACKAGES: ca-certificates git cmake ninja-build libfmt-dev libpsl-dev libssl-dev pkgconf ${{ matrix.qt-version == '6' && 'qt6-base-dev' || 'qtbase5-dev' }} ${{ matrix.compiler == 'gcc' && 'g++' || 'clang' }} ${{ startsWith(matrix.container-image, 'ubuntu') && 'libcpp-httplib-dev' || '' }}

    runs-on: ubuntu-latest
    container: ${{ matrix.container-image }}

    steps:
    - name: Install packages on Fedora/Mageia
      if: startsWith(matrix.container-image, 'fedora') || startsWith(matrix.container-image, 'mageia')
      run: dnf -y --setopt=install_weak_deps=False install ${{env.RPM_PACKAGES}}

    - name: Install packages on openSUSE
      if: startsWith(matrix.container-image, 'opensuse')
      run: zypper --non-interactive in --no-recommends ${{env.RPM_PACKAGES}}

    - name: Install packages on Debian/Ubuntu
      if: startsWith(matrix.container-image, 'debian') || startsWith(matrix.container-image, 'ubuntu')
      run: apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --assume-yes install ${{env.DEB_PACKAGES}}

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Add GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build libtremotesf
      uses: equeim/action-cmake-build@v9
      with:
        cmake-arguments: -D TREMOTESF_QT6=${{ matrix.qt-version == 6 && 'ON' || 'OFF' }} -D CMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}

  build-freebsd:
    strategy:
      fail-fast: false
      matrix:
        freebsd-version: ['12.4', '13.2']
        qt-version: [5, 6]
    env:
      FREEBSD_VERSION: ${{ matrix.freebsd-version }}

    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Add GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Start FreeBSD VM
      run: |
        echo '::group::Starting VM'
        VAGRANT_CWD="$GITHUB_WORKSPACE/.github/workflows" vagrant up --provider=virtualbox
        echo '::endgroup'
        echo '::group::Adding vagrant shell to PATH'
        echo "$GITHUB_WORKSPACE/.github/workflows" >> "$GITHUB_PATH"
        echo '::endgroup'

    - name: Install dependencies
      shell: vagrant-freebsd-shell.sh {0}
      run: |
        sudo pkg update -f
        sudo pkg install -y cmake ninja pkgconf libpsl libfmt cpp-httplib ${{ matrix.qt-version == '6' && 'qt6-base' || 'qt5-buildtools qt5-qmake qt5-core qt5-network qt5-concurrent qt5-testlib' }}

    - name: Build for FreeBSD
      shell: vagrant-freebsd-shell.sh {0}
      run: |
        echo '::group::Configuring CMake'
        cmake -S . --preset base -D TREMOTESF_QT6=${{ matrix.qt-version == 6 && 'ON' || 'OFF' }}
        echo '::endgroup'
        echo '::group::Building Debug'
        cmake --build --preset base-debug
        echo '::endgroup'
        echo '::group::Testing Debug'
        ctest --preset base-debug
        echo '::endgroup'
        echo '::group::Building Release'
        cmake --build --preset base-release
        echo '::endgroup'
        echo '::group::Testing Release'
        ctest --preset base-release
        echo '::endgroup'

  build-windows-msvc:
    strategy:
      fail-fast: false
      matrix:
        toolchain: ['msvc', 'msvc-clang']
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Set up MSVC environment
      uses: equeim/action-setup-msvc-environment@v1

    - name: Set VCPKG_ROOT environment variable
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" >> '${{ github.env }}'

    - name: Set up vcpkg
      uses: equeim/action-setup-vcpkg@v6
      with:
        binary-cache-path: C:\vcpkg_binary_cache
        save-cache: ${{ github.event_name != 'pull_request' && matrix.toolchain == 'msvc' }}

    - name: Build libtremotesf with ${{ matrix.toolchain == 'msvc-clang' && 'MSVC + Clang' || 'MSVC' }} toolchain
      uses: equeim/action-cmake-build@v9
      with:
        cmake-arguments: --preset ${{ matrix.toolchain == 'msvc-clang' && 'windows-msvc-clang-vcpkg' || 'windows-msvc-vcpkg' }} -D VCPKG_INSTALLED_DIR=C:/vcpkg_installed

    - name: Archive vcpkg logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ${{ matrix.toolchain == 'msvc-clang' && 'windows-msvc-clang-vcpkg-logs' || 'windows-msvc-vcpkg-logs' }}
        retention-days: ${{ github.event_name == 'push' && 7 || 3 }}
        path: ${{env.VCPKG_ROOT}}\buildtrees\*\*.log

  build-windows-mingw:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: 'CLANG64'
        update: 'true'
        install: |
          mingw-w64-clang-x86_64-clang
          mingw-w64-clang-x86_64-cmake
          mingw-w64-clang-x86_64-cppwinrt
          mingw-w64-clang-x86_64-fmt
          mingw-w64-clang-x86_64-openssl
          mingw-w64-clang-x86_64-pkgconf
          mingw-w64-clang-x86_64-qt6-base

    - name: Generate C++/WinRT headers
      shell: msys2 {0}
      run: |
          cppwinrt -input sdk -output /clang64/include

    - name: Add GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build with LLVM MinGW toolchain
      shell: msys2 {0}
      run: |
          set -e -o pipefail
          echo '::group::Configuring CMake'
          cmake -S . --preset base -D TREMOTESF_QT6=ON
          echo '::endgroup'
          echo '::group::Building Debug'
          cmake --build --preset base-debug
          echo '::endgroup'
          echo '::group::Testing Debug'
          ctest --preset base-debug
          echo '::endgroup'
          echo '::group::Building Release'
          cmake --build --preset base-release
          echo '::endgroup'
          echo '::group::Testing Release'
          ctest --preset base-release
          echo '::endgroup'

  reuse-lint:
    runs-on: ubuntu-latest
    steps:
    - name: Check out
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Check REUSE compliance
      run: |
        sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --assume-yes install pipx
        pipx run reuse lint
