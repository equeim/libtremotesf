# SPDX-FileCopyrightText: 2015-2022 Alexey Rochev
#
# SPDX-License-Identifier: CC0-1.0

name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build-linux:
    strategy:
      matrix:
        container-image: ['fedora:35', 'fedora:36', 'opensuse/tumbleweed:latest', 'mageia:8', 'debian:11', 'ubuntu:22.04']
        qt-version: [5]
        compiler: [gcc, clang]
        include:
        - container-image: 'fedora:35'
          qt-version: 6
          compiler: gcc
        - container-image: 'fedora:35'
          qt-version: 6
          compiler: clang
        - container-image: 'fedora:36'
          qt-version: 6
          compiler: gcc
        - container-image: 'fedora:36'
          qt-version: 6
          compiler: clang
        - container-image: 'opensuse/tumbleweed:latest'
          qt-version: 6
          compiler: gcc
        - container-image: 'opensuse/tumbleweed:latest'
          qt-version: 6
          compiler: clang
        - container-image: 'ubuntu:22.04'
          qt-version: 6
          compiler: gcc
        - container-image: 'ubuntu:22.04'
          qt-version: 6
          compiler: clang

    runs-on: ubuntu-latest
    container: ${{ matrix.container-image }}

    steps:
    - name: Install packages on Fedora/Mageia
      if: startsWith(matrix.container-image, 'fedora') || startsWith(matrix.container-image, 'mageia')
      run: dnf -y --setopt=install_weak_deps=False install git cmake ninja-build 'cmake(Qt${{matrix.qt-version}}Core)' 'cmake(Qt${{matrix.qt-version}}Concurrent)' 'cmake(Qt${{matrix.qt-version}}Network)' 'cmake(Qt${{matrix.qt-version}}Test)' 'cmake(fmt)' ${{ matrix.compiler == 'gcc' && 'gcc-c++' || 'clang' }}

    - name: Install packages on openSUSE
      if: startsWith(matrix.container-image, 'opensuse')
      run: zypper --non-interactive in --no-recommends git cmake ninja 'cmake(Qt${{matrix.qt-version}}Core)' 'cmake(Qt${{matrix.qt-version}}Concurrent)' 'cmake(Qt${{matrix.qt-version}}Network)' 'cmake(Qt${{matrix.qt-version}}Test)' 'cmake(fmt)' ${{ matrix.compiler == 'gcc' && 'gcc-c++' || 'clang' }}

    - name: Install packages on Debian/Ubuntu
      if: startsWith(matrix.container-image, 'debian') || startsWith(matrix.container-image, 'ubuntu')
      run: apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --assume-yes install ca-certificates git cmake ninja-build libfmt-dev ${{ matrix.qt-version == '6' && 'qt6-base-dev' || 'qtbase5-dev' }} ${{ matrix.compiler == 'gcc' && 'g++' || 'clang' }}

    - name: Checkout
      uses: actions/checkout@v3

    - name: Add GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build libtremotesf
      uses: equeim/action-cmake-build@v9
      with:
        cmake-arguments: -D TREMOTESF_QT6=${{ matrix.qt-version == 6 && 'ON' || 'OFF' }} -D CMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc' && (startsWith(matrix.container-image, 'opensuse/leap') && 'g++-11' || 'g++') || 'clang++' }}

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up MSVC environment
      uses: equeim/action-setup-msvc-environment@v1

    - name: Add GNU Tar from MSYS2 to PATH so that zstd will work
      run: |
        mkdir '${{ runner.temp }}\tar'
        echo '"C:\msys64\usr\bin\tar.exe" %*' > '${{ runner.temp }}\tar\tar.bat'
        echo '${{ runner.temp }}\tar' >> '${{ github.path }}'

    - name: Set up vcpkg
      uses: equeim/action-setup-vcpkg@v3
      with:
        vcpkg-root: C:\vcpkg
        run-install: true
        triplet: x64-windows-static
        install-features: qt5 qt6
        save-cache: ${{ github.event_name != 'pull_request' }}

    # We don't use matrix for compiler because we want for vcpkg to install dependencies only once

    - name: Build libtremotesf with Qt 6 and MSVC
      uses: equeim/action-cmake-build@v9
      with:
        cmake-arguments: --preset windows -D VCPKG_MANIFEST_INSTALL=OFF -D TREMOTESF_QT6=ON
        output-directories-suffix: -qt6

    - name: Build libtremotesf with Qt 6 and clang-cl
      uses: equeim/action-cmake-build@v9
      with:
        cmake-arguments: --preset windows -D VCPKG_MANIFEST_INSTALL=OFF -D TREMOTESF_QT6=ON -D CMAKE_CXX_COMPILER=clang-cl
        output-directories-suffix: -qt6-clang-cl

    - name: Build libtremotesf with Qt 5 and MSVC
      uses: equeim/action-cmake-build@v9
      with:
        cmake-arguments: --preset windows -D VCPKG_MANIFEST_INSTALL=OFF -D TREMOTESF_QT6=OFF
        output-directories-suffix: -qt5

    - name: Build libtremotesf with Qt 5 and clang-cl
      uses: equeim/action-cmake-build@v9
      with:
        cmake-arguments: --preset windows -D VCPKG_MANIFEST_INSTALL=OFF -D TREMOTESF_QT6=OFF -D CMAKE_CXX_COMPILER=clang-cl
        output-directories-suffix: -qt5-clang-cl

    - name: Archive vcpkg logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: vcpkg-logs
        retention-days: ${{ github.event_name == 'push' && github.retention_days || 3 }}
        path: ${{env.VCPKG_ROOT}}\buildtrees\*\*.log

  reuse-lint:
    runs-on: ubuntu-22.04
    steps:
    - name: Check out
      uses: actions/checkout@v3

    - name: Check REUSE compliance
      run: |
        sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --assume-yes install pipx
        pipx run reuse lint
