/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_libtremotesfJNI = NULL;
    jmethodID director_method_ids[15];
  }
}

#include "../rpc.h"
#include "../torrent.h"
#include "../tracker.h"
#include "../serverstats.h"
#include "../serversettings.h"
#include "jnirpc.h"


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< std::shared_ptr< libtremotesf::Torrent > >::const_reference std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Torrent_Sg__Sg__get(std::vector< std::shared_ptr< libtremotesf::Torrent > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Torrent_Sg__Sg__set(std::vector< std::shared_ptr< libtremotesf::Torrent > > *self,int i,std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::const_reference std_vector_Sl_std_shared_ptr_Sl_libtremotesf_TorrentFile_Sg__Sg__get(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_libtremotesf_TorrentFile_Sg__Sg__set(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *self,int i,std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< libtremotesf::Tracker > >::const_reference std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Tracker_Sg__Sg__get(std::vector< std::shared_ptr< libtremotesf::Tracker > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Tracker_Sg__Sg__set(std::vector< std::shared_ptr< libtremotesf::Tracker > > *self,int i,std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< libtremotesf::Peer > >::const_reference std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Peer_Sg__Sg__get(std::vector< std::shared_ptr< libtremotesf::Peer > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Peer_Sg__Sg__set(std::vector< std::shared_ptr< libtremotesf::Peer > > *self,int i,std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< QString >::const_reference std_vector_Sl_QString_Sg__get(std::vector< QString > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_QString_Sg__set(std::vector< QString > *self,int i,std::vector< QString >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "libtremotesf_wrap.h"

SwigDirector_JniRpc::SwigDirector_JniRpc(JNIEnv *jenv) : libtremotesf::JniRpc(), Swig::Director(jenv) {
}

void SwigDirector_JniRpc::onAboutToDisconnect() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    libtremotesf::JniRpc::onAboutToDisconnect();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onAboutToDisconnect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onConnectedChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    libtremotesf::JniRpc::onConnectedChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onConnectedChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onStatusChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    libtremotesf::JniRpc::onStatusChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[2], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onErrorChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    libtremotesf::JniRpc::onErrorChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[3], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onErrorChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentsUpdated() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    libtremotesf::JniRpc::onTorrentsUpdated();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentsUpdated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onServerStatsUpdated() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    libtremotesf::JniRpc::onServerStatsUpdated();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[5], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onServerStatsUpdated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentAdded(int id, QString const &hashString, QString const &name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jid  ;
  jstring jhashString = 0 ;
  jstring jname = 0 ;
  
  if (!swig_override[6]) {
    libtremotesf::JniRpc::onTorrentAdded(id,hashString,name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = (jint) id;
    
    jhashString = jenv->NewString(reinterpret_cast<const jchar*>((&hashString)->constData()), (&hashString)->size());
    
    
    jname = jenv->NewString(reinterpret_cast<const jchar*>((&name)->constData()), (&name)->size());
    
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[6], swigjobj, jid, jhashString, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentAdded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentFinished(int id, QString const &hashString, QString const &name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jid  ;
  jstring jhashString = 0 ;
  jstring jname = 0 ;
  
  if (!swig_override[7]) {
    libtremotesf::JniRpc::onTorrentFinished(id,hashString,name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = (jint) id;
    
    jhashString = jenv->NewString(reinterpret_cast<const jchar*>((&hashString)->constData()), (&hashString)->size());
    
    
    jname = jenv->NewString(reinterpret_cast<const jchar*>((&name)->constData()), (&name)->size());
    
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[7], swigjobj, jid, jhashString, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentFinished ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentAddDuplicate() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[8]) {
    libtremotesf::JniRpc::onTorrentAddDuplicate();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[8], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentAddDuplicate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentAddError() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    libtremotesf::JniRpc::onTorrentAddError();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[9], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentAddError ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onGotTorrentFiles(int torrentId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtorrentId  ;
  
  if (!swig_override[10]) {
    libtremotesf::JniRpc::onGotTorrentFiles(torrentId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtorrentId = (jint) torrentId;
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[10], swigjobj, jtorrentId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onGotTorrentFiles ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentFileRenamed(int torrentId, QString const &filePath, QString const &newName) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtorrentId  ;
  jstring jfilePath = 0 ;
  jstring jnewName = 0 ;
  
  if (!swig_override[11]) {
    libtremotesf::JniRpc::onTorrentFileRenamed(torrentId,filePath,newName);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtorrentId = (jint) torrentId;
    
    jfilePath = jenv->NewString(reinterpret_cast<const jchar*>((&filePath)->constData()), (&filePath)->size());
    
    
    jnewName = jenv->NewString(reinterpret_cast<const jchar*>((&newName)->constData()), (&newName)->size());
    
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[11], swigjobj, jtorrentId, jfilePath, jnewName);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentFileRenamed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onGotTorrentPeers(int torrentId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtorrentId  ;
  
  if (!swig_override[12]) {
    libtremotesf::JniRpc::onGotTorrentPeers(torrentId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtorrentId = (jint) torrentId;
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[12], swigjobj, jtorrentId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onGotTorrentPeers ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onGotDownloadDirFreeSpace(long long bytes) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbytes  ;
  
  if (!swig_override[13]) {
    libtremotesf::JniRpc::onGotDownloadDirFreeSpace(bytes);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbytes = (jlong) bytes;
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[13], swigjobj, jbytes);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onGotDownloadDirFreeSpace ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onGotFreeSpaceForPath(QString const &path, bool success, long long bytes) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jpath = 0 ;
  jboolean jsuccess  ;
  jlong jbytes  ;
  
  if (!swig_override[14]) {
    libtremotesf::JniRpc::onGotFreeSpaceForPath(path,success,bytes);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpath = jenv->NewString(reinterpret_cast<const jchar*>((&path)->constData()), (&path)->size());
    
    jsuccess = (jboolean) success;
    jbytes = (jlong) bytes;
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[14], swigjobj, jpath, jsuccess, jbytes);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onGotFreeSpaceForPath ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onAboutToDisconnect", "()V", NULL 
    },
    {
      "onConnectedChanged", "()V", NULL 
    },
    {
      "onStatusChanged", "()V", NULL 
    },
    {
      "onErrorChanged", "()V", NULL 
    },
    {
      "onTorrentsUpdated", "()V", NULL 
    },
    {
      "onServerStatsUpdated", "()V", NULL 
    },
    {
      "onTorrentAdded", "(ILjava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "onTorrentFinished", "(ILjava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "onTorrentAddDuplicate", "()V", NULL 
    },
    {
      "onTorrentAddError", "()V", NULL 
    },
    {
      "onGotTorrentFiles", "(I)V", NULL 
    },
    {
      "onTorrentFileRenamed", "(ILjava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "onGotTorrentPeers", "(I)V", NULL 
    },
    {
      "onGotDownloadDirFreeSpace", "(J)V", NULL 
    },
    {
      "onGotFreeSpaceForPath", "(Ljava/lang/String;ZJ)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/equeim/libtremotesf/JniRpc");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 15; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentsVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Torrent > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Torrent > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< libtremotesf::Torrent > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentsVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Torrent > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Torrent > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< libtremotesf::Torrent > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentsVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< libtremotesf::Torrent > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Torrent > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Torrent > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< libtremotesf::Torrent > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentsVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Torrent > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Torrent > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< libtremotesf::Torrent > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentsVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< libtremotesf::Torrent > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Torrent > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Torrent > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentsVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< libtremotesf::Torrent > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Torrent > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Torrent > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentsVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Torrent > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Torrent > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Torrent_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type **)&jresult = *result ? new std::shared_ptr< libtremotesf::Torrent >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentsVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< libtremotesf::Torrent > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Torrent > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Torrent > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< libtremotesf::Torrent > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Torrent_Sg__Sg__set(arg1,arg2,(std::shared_ptr< libtremotesf::Torrent > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TorrentsVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< libtremotesf::Torrent > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Torrent > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Torrent > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< libtremotesf::TorrentFile > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< libtremotesf::TorrentFile > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< libtremotesf::TorrentFile > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_libtremotesf_TorrentFile_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type **)&jresult = *result ? new std::shared_ptr< libtremotesf::TorrentFile >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_libtremotesf_TorrentFile_Sg__Sg__set(arg1,arg2,(std::shared_ptr< libtremotesf::TorrentFile > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TorrentFilesVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Tracker > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Tracker > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< libtremotesf::Tracker > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Tracker > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Tracker > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< libtremotesf::Tracker > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< libtremotesf::Tracker > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Tracker > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Tracker > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< libtremotesf::Tracker > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Tracker > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Tracker > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< libtremotesf::Tracker > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< libtremotesf::Tracker > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Tracker > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Tracker > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< libtremotesf::Tracker > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Tracker > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Tracker > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Tracker > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Tracker > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Tracker_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type **)&jresult = *result ? new std::shared_ptr< libtremotesf::Tracker >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< libtremotesf::Tracker > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Tracker > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Tracker > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< libtremotesf::Tracker > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Tracker_Sg__Sg__set(arg1,arg2,(std::shared_ptr< libtremotesf::Tracker > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TrackersVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< libtremotesf::Tracker > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Tracker > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Tracker > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Peer > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Peer > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< libtremotesf::Peer > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Peer > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Peer > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< libtremotesf::Peer > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< libtremotesf::Peer > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Peer > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Peer > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< libtremotesf::Peer > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Peer > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Peer > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< libtremotesf::Peer > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< libtremotesf::Peer > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Peer > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Peer > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< libtremotesf::Peer > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Peer > > *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Peer > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Peer > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Peer > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Peer_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type **)&jresult = *result ? new std::shared_ptr< libtremotesf::Peer >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< libtremotesf::Peer > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Peer > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Peer > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< libtremotesf::Peer > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_libtremotesf_Peer_Sg__Sg__set(arg1,arg2,(std::shared_ptr< libtremotesf::Peer > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TorrentPeersVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< libtremotesf::Peer > > *arg1 = (std::vector< std::shared_ptr< libtremotesf::Peer > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< libtremotesf::Peer > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  std::vector< QString >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  result = ((std::vector< QString > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  std::vector< QString >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  result = ((std::vector< QString > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  std::vector< QString >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  arg2 = (std::vector< QString >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  result = (bool)((std::vector< QString > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  std::vector< QString >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->push_back((std::vector< QString >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  int arg2 ;
  std::vector< QString >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< QString >::value_type *) &std_vector_Sl_QString_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  int arg2 ;
  std::vector< QString >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  try {
    std_vector_Sl_QString_Sg__set(arg1,arg2,(QString const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1StringsVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< QString > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  std::vector< QString > *arg2 = (std::vector< QString > *) 0 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< QString > **)&jarg2; 
  if (arg1) (arg1)->path = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  std::vector< QString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< QString > *)& ((arg1)->path);
  *(std::vector< QString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  long long arg2 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long) ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1completedSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  long long arg2 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->completedSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1completedSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long) ((arg1)->completedSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1wanted_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  bool arg2 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->wanted = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1wanted_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool) ((arg1)->wanted);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  libtremotesf::TorrentFile::Priority arg2 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (libtremotesf::TorrentFile::Priority)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  libtremotesf::TorrentFile::Priority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (libtremotesf::TorrentFile::Priority) ((arg1)->priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1changed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  bool arg2 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->changed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1changed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool) ((arg1)->changed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TorrentFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  std::shared_ptr< libtremotesf::TorrentFile > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::TorrentFile > **)&jarg1;
  arg1 = (libtremotesf::TorrentFile *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  QString *arg2 = 0 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->address = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QString *) & ((arg1)->address);
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1downloadSpeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  long long arg2 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->downloadSpeed = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1downloadSpeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long) ((arg1)->downloadSpeed);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1uploadSpeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  long long arg2 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->uploadSpeed = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1uploadSpeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long) ((arg1)->uploadSpeed);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  float arg2 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->progress = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float) ((arg1)->progress);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  QString *arg2 = 0 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->flags = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QString *) & ((arg1)->flags);
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1client_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  QString *arg2 = 0 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->client = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1client_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QString *) & ((arg1)->client);
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1Peer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  std::shared_ptr< libtremotesf::Peer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Peer > **)&jarg1;
  arg1 = (libtremotesf::Peer *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1idKey_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (QString *) &libtremotesf::Torrent::idKey;
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Torrent const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1hashString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QString *) &((libtremotesf::Torrent const *)arg1)->hashString();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QString *) &((libtremotesf::Torrent const *)arg1)->name();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  libtremotesf::Torrent::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (libtremotesf::Torrent::Status)((libtremotesf::Torrent const *)arg1)->status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1errorString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  QString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((libtremotesf::Torrent const *)arg1)->errorString();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>((&result)->constData()), (&result)->size());
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1queuePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Torrent const *)arg1)->queuePosition();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1totalSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long)((libtremotesf::Torrent const *)arg1)->totalSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1completedSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long)((libtremotesf::Torrent const *)arg1)->completedSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1leftUntilDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long)((libtremotesf::Torrent const *)arg1)->leftUntilDone();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1sizeWhenDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long)((libtremotesf::Torrent const *)arg1)->sizeWhenDone();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1percentDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((libtremotesf::Torrent const *)arg1)->percentDone();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1recheckProgress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((libtremotesf::Torrent const *)arg1)->recheckProgress();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1eta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Torrent const *)arg1)->eta();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1downloadSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long)((libtremotesf::Torrent const *)arg1)->downloadSpeed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1uploadSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long)((libtremotesf::Torrent const *)arg1)->uploadSpeed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1isDownloadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((libtremotesf::Torrent const *)arg1)->isDownloadSpeedLimited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1downloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Torrent const *)arg1)->downloadSpeedLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1isUploadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((libtremotesf::Torrent const *)arg1)->isUploadSpeedLimited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1uploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Torrent const *)arg1)->uploadSpeedLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1totalDownloaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long)((libtremotesf::Torrent const *)arg1)->totalDownloaded();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1totalUploaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (long long)((libtremotesf::Torrent const *)arg1)->totalUploaded();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1ratio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((libtremotesf::Torrent const *)arg1)->ratio();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1ratioLimitMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  libtremotesf::Torrent::RatioLimitMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (libtremotesf::Torrent::RatioLimitMode)((libtremotesf::Torrent const *)arg1)->ratioLimitMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1ratioLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((libtremotesf::Torrent const *)arg1)->ratioLimit();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1seeders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Torrent const *)arg1)->seeders();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1leechers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Torrent const *)arg1)->leechers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1peersLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Torrent const *)arg1)->peersLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1addedDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  QDateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QDateTime *) &((libtremotesf::Torrent const *)arg1)->addedDate();
  
  const jclass clazz = jenv->FindClass("java/util/Date");
  const jmethodID id = jenv->GetMethodID(clazz, "<init>", "(J)V");
  jresult = jenv->NewObject(clazz, id, result->toMSecsSinceEpoch());
  
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1activityDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  QDateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QDateTime *) &((libtremotesf::Torrent const *)arg1)->activityDate();
  
  const jclass clazz = jenv->FindClass("java/util/Date");
  const jmethodID id = jenv->GetMethodID(clazz, "<init>", "(J)V");
  jresult = jenv->NewObject(clazz, id, result->toMSecsSinceEpoch());
  
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1doneDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  QDateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QDateTime *) &((libtremotesf::Torrent const *)arg1)->doneDate();
  
  const jclass clazz = jenv->FindClass("java/util/Date");
  const jmethodID id = jenv->GetMethodID(clazz, "<init>", "(J)V");
  jresult = jenv->NewObject(clazz, id, result->toMSecsSinceEpoch());
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1honorSessionLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((libtremotesf::Torrent const *)arg1)->honorSessionLimits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1bandwidthPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  libtremotesf::Torrent::Priority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (libtremotesf::Torrent::Priority)((libtremotesf::Torrent const *)arg1)->bandwidthPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1idleSeedingLimitMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  libtremotesf::Torrent::IdleSeedingLimitMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (libtremotesf::Torrent::IdleSeedingLimitMode)((libtremotesf::Torrent const *)arg1)->idleSeedingLimitMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1idleSeedingLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Torrent const *)arg1)->idleSeedingLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1downloadDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QString *) &((libtremotesf::Torrent const *)arg1)->downloadDirectory();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1creator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QString *) &((libtremotesf::Torrent const *)arg1)->creator();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1creationDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  QDateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QDateTime *) &((libtremotesf::Torrent const *)arg1)->creationDate();
  
  const jclass clazz = jenv->FindClass("java/util/Date");
  const jmethodID id = jenv->GetMethodID(clazz, "<init>", "(J)V");
  jresult = jenv->NewObject(clazz, id, result->toMSecsSinceEpoch());
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1comment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QString *) &((libtremotesf::Torrent const *)arg1)->comment();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1isFilesEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((libtremotesf::Torrent const *)arg1)->isFilesEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1isFilesLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((libtremotesf::Torrent const *)arg1)->isFilesLoaded();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::shared_ptr< libtremotesf::TorrentFile > > *) &((libtremotesf::Torrent const *)arg1)->files();
  *(std::vector< std::shared_ptr< libtremotesf::TorrentFile > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1trackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Tracker > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::shared_ptr< libtremotesf::Tracker > > *) &((libtremotesf::Torrent const *)arg1)->trackers();
  *(std::vector< std::shared_ptr< libtremotesf::Tracker > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1isPeersEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((libtremotesf::Torrent const *)arg1)->isPeersEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1isPeersLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((libtremotesf::Torrent const *)arg1)->isPeersLoaded();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1peers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< libtremotesf::Peer > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::shared_ptr< libtremotesf::Peer > > *) &((libtremotesf::Torrent const *)arg1)->peers();
  *(std::vector< std::shared_ptr< libtremotesf::Peer > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Torrent_1isChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((libtremotesf::Torrent const *)arg1)->isChanged();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1Torrent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::Torrent *arg1 = (libtremotesf::Torrent *) 0 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg1;
  arg1 = (libtremotesf::Torrent *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  std::shared_ptr< libtremotesf::Tracker const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Tracker > **)&jarg1;
  arg1 = (libtremotesf::Tracker *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Tracker const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1announce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  std::shared_ptr< libtremotesf::Tracker const > *smartarg1 = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Tracker > **)&jarg1;
  arg1 = (libtremotesf::Tracker *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QString *) &((libtremotesf::Tracker const *)arg1)->announce();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1site(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  std::shared_ptr< libtremotesf::Tracker const > *smartarg1 = 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Tracker > **)&jarg1;
  arg1 = (libtremotesf::Tracker *)(smartarg1 ? smartarg1->get() : 0); 
  result = (QString *) &((libtremotesf::Tracker const *)arg1)->site();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  std::shared_ptr< libtremotesf::Tracker const > *smartarg1 = 0 ;
  libtremotesf::Tracker::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Tracker > **)&jarg1;
  arg1 = (libtremotesf::Tracker *)(smartarg1 ? smartarg1->get() : 0); 
  result = (libtremotesf::Tracker::Status)((libtremotesf::Tracker const *)arg1)->status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1errorMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  std::shared_ptr< libtremotesf::Tracker const > *smartarg1 = 0 ;
  QString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Tracker > **)&jarg1;
  arg1 = (libtremotesf::Tracker *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((libtremotesf::Tracker const *)arg1)->errorMessage();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>((&result)->constData()), (&result)->size());
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1peers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  std::shared_ptr< libtremotesf::Tracker const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Tracker > **)&jarg1;
  arg1 = (libtremotesf::Tracker *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Tracker const *)arg1)->peers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1nextUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  std::shared_ptr< libtremotesf::Tracker const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const libtremotesf::Tracker > **)&jarg1;
  arg1 = (libtremotesf::Tracker *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((libtremotesf::Tracker const *)arg1)->nextUpdate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1Tracker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  std::shared_ptr< libtremotesf::Tracker > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  libtremotesf::Tracker > **)&jarg1;
  arg1 = (libtremotesf::Tracker *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1serverSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  libtremotesf::ServerSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  result = (libtremotesf::ServerSettings *)((libtremotesf::Rpc const *)arg1)->serverSettings();
  *(libtremotesf::ServerSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1serverStats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  libtremotesf::ServerStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  result = (libtremotesf::ServerStats *)((libtremotesf::Rpc const *)arg1)->serverStats();
  *(libtremotesf::ServerStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1torrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  std::vector< std::shared_ptr< libtremotesf::Torrent > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  result = (std::vector< std::shared_ptr< libtremotesf::Torrent > > *) &((libtremotesf::Rpc const *)arg1)->torrents();
  *(std::vector< std::shared_ptr< libtremotesf::Torrent > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1torrentByHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QString *arg2 = 0 ;
  libtremotesf::Torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return 0;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (libtremotesf::Torrent *)((libtremotesf::Rpc const *)arg1)->torrentByHash((QString const &)*arg2);
  
  *(std::shared_ptr<  libtremotesf::Torrent > **)&jresult = result ? new std::shared_ptr<  libtremotesf::Torrent >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1torrentById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  int arg2 ;
  std::shared_ptr< libtremotesf::Torrent > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((libtremotesf::Rpc const *)arg1)->torrentById(arg2);
  *(std::shared_ptr< libtremotesf::Torrent > **)&jresult = result ? new std::shared_ptr< libtremotesf::Torrent >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  result = (bool)((libtremotesf::Rpc const *)arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  libtremotesf::Rpc::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  result = (libtremotesf::Rpc::Status)((libtremotesf::Rpc const *)arg1)->status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  libtremotesf::Rpc::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  result = (libtremotesf::Rpc::Error)((libtremotesf::Rpc const *)arg1)->error();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1isLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  result = (bool)((libtremotesf::Rpc const *)arg1)->isLocal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1torrentsCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  result = (int)((libtremotesf::Rpc const *)arg1)->torrentsCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1backgroundUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  result = (bool)((libtremotesf::Rpc const *)arg1)->backgroundUpdate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1setBackgroundUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setBackgroundUpdate(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1isUpdateDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  result = (bool)((libtremotesf::Rpc const *)arg1)->isUpdateDisabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1setUpdateDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUpdateDisabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1resetServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  (arg1)->resetServer();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  (arg1)->connect();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  (arg1)->disconnect();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1addTorrentFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jintArray jarg4, jintArray jarg5, jintArray jarg6, jintArray jarg7, jintArray jarg8, jint jarg9, jboolean jarg10) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QByteArray *arg2 = 0 ;
  QString *arg3 = 0 ;
  QVariantList *arg4 = 0 ;
  QVariantList *arg5 = 0 ;
  QVariantList *arg6 = 0 ;
  QVariantList *arg7 = 0 ;
  QVariantList *arg8 = 0 ;
  int arg9 ;
  bool arg10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QByteArray");
    return ;
  }
  jbyte* arg2_pstr = jenv->GetByteArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QByteArray arg2_str(QByteArray::fromRawData(reinterpret_cast<const char*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg4_pstr = jenv->GetIntArrayElements(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetArrayLength(jarg4);
  QVariantList arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back(arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseIntArrayElements(jarg4, arg4_pstr, 0);
  
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg5_pstr = jenv->GetIntArrayElements(jarg5, 0);
  if (!arg5_pstr) return ;
  jsize arg5_len = jenv->GetArrayLength(jarg5);
  QVariantList arg5_str;
  if (arg5_len) {
    arg5_str.reserve(arg5_len);
    for (jsize i = 0; i < arg5_len; ++i) {
      arg5_str.push_back(arg5_pstr[i]);
    }
  }
  arg5 = &arg5_str;
  jenv->ReleaseIntArrayElements(jarg5, arg5_pstr, 0);
  
  
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg6_pstr = jenv->GetIntArrayElements(jarg6, 0);
  if (!arg6_pstr) return ;
  jsize arg6_len = jenv->GetArrayLength(jarg6);
  QVariantList arg6_str;
  if (arg6_len) {
    arg6_str.reserve(arg6_len);
    for (jsize i = 0; i < arg6_len; ++i) {
      arg6_str.push_back(arg6_pstr[i]);
    }
  }
  arg6 = &arg6_str;
  jenv->ReleaseIntArrayElements(jarg6, arg6_pstr, 0);
  
  
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg7_pstr = jenv->GetIntArrayElements(jarg7, 0);
  if (!arg7_pstr) return ;
  jsize arg7_len = jenv->GetArrayLength(jarg7);
  QVariantList arg7_str;
  if (arg7_len) {
    arg7_str.reserve(arg7_len);
    for (jsize i = 0; i < arg7_len; ++i) {
      arg7_str.push_back(arg7_pstr[i]);
    }
  }
  arg7 = &arg7_str;
  jenv->ReleaseIntArrayElements(jarg7, arg7_pstr, 0);
  
  
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg8_pstr = jenv->GetIntArrayElements(jarg8, 0);
  if (!arg8_pstr) return ;
  jsize arg8_len = jenv->GetArrayLength(jarg8);
  QVariantList arg8_str;
  if (arg8_len) {
    arg8_str.reserve(arg8_len);
    for (jsize i = 0; i < arg8_len; ++i) {
      arg8_str.push_back(arg8_pstr[i]);
    }
  }
  arg8 = &arg8_str;
  jenv->ReleaseIntArrayElements(jarg8, arg8_pstr, 0);
  
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->addTorrentFile((QByteArray const &)*arg2,(QString const &)*arg3,(QVariantList const &)*arg4,(QVariantList const &)*arg5,(QVariantList const &)*arg6,(QVariantList const &)*arg7,(QVariantList const &)*arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1addTorrentLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jboolean jarg5) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->addTorrentLink((QString const &)*arg2,(QString const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1startTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->startTorrents((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1startTorrentsNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->startTorrentsNow((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1pauseTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->pauseTorrents((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1removeTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jboolean jarg3) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QVariantList *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  arg3 = jarg3 ? true : false; 
  (arg1)->removeTorrents((QVariantList const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1checkTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->checkTorrents((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1moveTorrentsToTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->moveTorrentsToTop((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1moveTorrentsUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->moveTorrentsUp((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1moveTorrentsDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->moveTorrentsDown((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1moveTorrentsToBottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->moveTorrentsToBottom((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1setTorrentLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jboolean jarg4) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = jarg4 ? true : false; 
  (arg1)->setTorrentLocation(arg2,(QString const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1getTorrentFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->getTorrentFiles(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1getTorrentPeers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->getTorrentPeers(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1renameTorrentFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  QString arg4_str(QString::fromUtf16(arg4_pstr, arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  (arg1)->renameTorrentFile(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1getDownloadDirFreeSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  (arg1)->getDownloadDirFreeSpace();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_BaseRpc_1getFreeSpaceForPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->getFreeSpaceForPath((QString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1BaseRpc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::Rpc *arg1 = (libtremotesf::Rpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::Rpc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  libtremotesf::Rpc *arg2 = (libtremotesf::Rpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = *(libtremotesf::Rpc **)&jarg2; 
  (arg1)->setRpc(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1rpcVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->rpcVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1minimumRpcVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->minimumRpcVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1canRenameFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->canRenameFiles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1canShowFreeSpaceForPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->canShowFreeSpaceForPath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1downloadDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (QString *) &((libtremotesf::ServerSettings const *)arg1)->downloadDirectory();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setDownloadDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->setDownloadDirectory((QString const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1startAddedTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->startAddedTorrents();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setStartAddedTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStartAddedTorrents(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1trashTorrentFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->trashTorrentFiles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setTrashTorrentFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTrashTorrentFiles(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1renameIncompleteFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->renameIncompleteFiles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setRenameIncompleteFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRenameIncompleteFiles(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isIncompleteDirectoryEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isIncompleteDirectoryEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setIncompleteDirectoryEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIncompleteDirectoryEnabled(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1incompleteDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (QString *) &((libtremotesf::ServerSettings const *)arg1)->incompleteDirectory();
  
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->constData()), result->size());
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setIncompleteDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->setIncompleteDirectory((QString const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isRatioLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isRatioLimited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setRatioLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRatioLimited(arg2);
}


SWIGEXPORT jfloat JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1ratioLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (float)((libtremotesf::ServerSettings const *)arg1)->ratioLimit();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setRatioLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRatioLimit(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isIdleSeedingLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isIdleSeedingLimited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setIdleSeedingLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIdleSeedingLimited(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1idleSeedingLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->idleSeedingLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setIdleSeedingLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIdleSeedingLimit(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isDownloadQueueEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isDownloadQueueEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setDownloadQueueEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDownloadQueueEnabled(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1downloadQueueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->downloadQueueSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setDownloadQueueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDownloadQueueSize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isSeedQueueEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isSeedQueueEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setSeedQueueEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSeedQueueEnabled(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1seedQueueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->seedQueueSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setSeedQueueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSeedQueueSize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isIdleQueueLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isIdleQueueLimited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setIdleQueueLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIdleQueueLimited(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1idleQueueLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->idleQueueLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setIdleQueueLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIdleQueueLimit(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isDownloadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isDownloadSpeedLimited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setDownloadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDownloadSpeedLimited(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1downloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->downloadSpeedLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setDownloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDownloadSpeedLimit(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isUploadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isUploadSpeedLimited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setUploadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUploadSpeedLimited(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1uploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->uploadSpeedLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setUploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUploadSpeedLimit(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isAlternativeSpeedLimitsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isAlternativeSpeedLimitsEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setAlternativeSpeedLimitsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAlternativeSpeedLimitsEnabled(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1alternativeDownloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->alternativeDownloadSpeedLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setAlternativeDownloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAlternativeDownloadSpeedLimit(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1alternativeUploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->alternativeUploadSpeedLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setAlternativeUploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAlternativeUploadSpeedLimit(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isAlternativeSpeedLimitsScheduled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isAlternativeSpeedLimitsScheduled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setAlternativeSpeedLimitsScheduled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAlternativeSpeedLimitsScheduled(arg2);
}


SWIGEXPORT jobject JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1alternativeSpeedLimitsBeginTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  QTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (QTime *) &((libtremotesf::ServerSettings const *)arg1)->alternativeSpeedLimitsBeginTime();
  
  const jclass clazz = jenv->FindClass("java/util/Date");
  const jmethodID id = jenv->GetMethodID(clazz, "<init>", "(J)V");
  jresult = jenv->NewObject(clazz, id, result->msecsSinceStartOfDay());
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setAlternativeSpeedLimitsBeginTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  QTime *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QTime");
    return ;
  }
  const jmethodID id = jenv->GetMethodID(jenv->GetObjectClass(jarg2), "getTime", "()J");
  const jlong time = jenv->CallLongMethod(jarg2, id);
  QTime arg2_str(QDateTime::fromMSecsSinceEpoch(time).time());
  arg2 = &arg2_str;
  
  (arg1)->setAlternativeSpeedLimitsBeginTime((QTime const &)*arg2);
}


SWIGEXPORT jobject JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1alternativeSpeedLimitsEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  QTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (QTime *) &((libtremotesf::ServerSettings const *)arg1)->alternativeSpeedLimitsEndTime();
  
  const jclass clazz = jenv->FindClass("java/util/Date");
  const jmethodID id = jenv->GetMethodID(clazz, "<init>", "(J)V");
  jresult = jenv->NewObject(clazz, id, result->msecsSinceStartOfDay());
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setAlternativeSpeedLimitsEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  QTime *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QTime");
    return ;
  }
  const jmethodID id = jenv->GetMethodID(jenv->GetObjectClass(jarg2), "getTime", "()J");
  const jlong time = jenv->CallLongMethod(jarg2, id);
  QTime arg2_str(QDateTime::fromMSecsSinceEpoch(time).time());
  arg2 = &arg2_str;
  
  (arg1)->setAlternativeSpeedLimitsEndTime((QTime const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1alternativeSpeedLimitsDays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  libtremotesf::ServerSettings::AlternativeSpeedLimitsDays result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (libtremotesf::ServerSettings::AlternativeSpeedLimitsDays)((libtremotesf::ServerSettings const *)arg1)->alternativeSpeedLimitsDays();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setAlternativeSpeedLimitsDays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  libtremotesf::ServerSettings::AlternativeSpeedLimitsDays arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (libtremotesf::ServerSettings::AlternativeSpeedLimitsDays)jarg2; 
  (arg1)->setAlternativeSpeedLimitsDays(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1peerPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->peerPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setPeerPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPeerPort(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isRandomPortEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isRandomPortEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setRandomPortEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRandomPortEnabled(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isPortForwardingEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isPortForwardingEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setPortForwardingEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPortForwardingEnabled(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1encryptionMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  libtremotesf::ServerSettings::EncryptionMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (libtremotesf::ServerSettings::EncryptionMode)((libtremotesf::ServerSettings const *)arg1)->encryptionMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setEncryptionMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  libtremotesf::ServerSettings::EncryptionMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (libtremotesf::ServerSettings::EncryptionMode)jarg2; 
  (arg1)->setEncryptionMode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isUtpEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isUtpEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setUtpEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUtpEnabled(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isPexEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isPexEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setPexEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPexEnabled(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isDhtEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isDhtEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setDhtEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDhtEnabled(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1isLpdEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->isLpdEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setLpdEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLpdEnabled(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1maximumPeersPerTorrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->maximumPeersPerTorrent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setMaximumPeersPerTorrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaximumPeersPerTorrent(arg2);
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1maximumPeersGlobally(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (int)((libtremotesf::ServerSettings const *)arg1)->maximumPeersGlobally();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setMaximumPeersGlobally(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaximumPeersGlobally(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1saveOnSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettings const *)arg1)->saveOnSet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettings_1setSaveOnSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSaveOnSet(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1ServerSettings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::ServerSettings *arg1 = (libtremotesf::ServerSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::ServerSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_SessionStats_1downloaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::SessionStats *arg1 = (libtremotesf::SessionStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::SessionStats **)&jarg1; 
  result = (long long) ((arg1)->downloaded);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_SessionStats_1uploaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::SessionStats *arg1 = (libtremotesf::SessionStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::SessionStats **)&jarg1; 
  result = (long long) ((arg1)->uploaded);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_SessionStats_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::SessionStats *arg1 = (libtremotesf::SessionStats *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::SessionStats **)&jarg1; 
  result = (int) ((arg1)->duration);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_SessionStats_1sessionCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::SessionStats *arg1 = (libtremotesf::SessionStats *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::SessionStats **)&jarg1; 
  result = (int) ((arg1)->sessionCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1SessionStats(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::SessionStats *arg1 = (libtremotesf::SessionStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::SessionStats **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerStats_1downloadSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::ServerStats *arg1 = (libtremotesf::ServerStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerStats **)&jarg1; 
  result = (long long)((libtremotesf::ServerStats const *)arg1)->downloadSpeed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerStats_1uploadSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::ServerStats *arg1 = (libtremotesf::ServerStats *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerStats **)&jarg1; 
  result = (long long)((libtremotesf::ServerStats const *)arg1)->uploadSpeed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerStats_1currentSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::ServerStats *arg1 = (libtremotesf::ServerStats *) 0 ;
  libtremotesf::SessionStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerStats **)&jarg1; 
  result = (libtremotesf::SessionStats *)((libtremotesf::ServerStats const *)arg1)->currentSession();
  *(libtremotesf::SessionStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerStats_1total(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::ServerStats *arg1 = (libtremotesf::ServerStats *) 0 ;
  libtremotesf::SessionStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerStats **)&jarg1; 
  result = (libtremotesf::SessionStats *)((libtremotesf::ServerStats const *)arg1)->total();
  *(libtremotesf::SessionStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1ServerStats(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::ServerStats *arg1 = (libtremotesf::ServerStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::ServerStats **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setDownloadDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->setDownloadDirectory((QString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setStartAddedTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStartAddedTorrents(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setTrashTorrentFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTrashTorrentFiles(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setRenameIncompleteFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRenameIncompleteFiles(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setIncompleteDirectoryEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIncompleteDirectoryEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setIncompleteDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->setIncompleteDirectory((QString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setRatioLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRatioLimited(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setRatioLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRatioLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setIdleSeedingLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIdleSeedingLimited(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setIdleSeedingLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIdleSeedingLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setDownloadQueueEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDownloadQueueEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setDownloadQueueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDownloadQueueSize(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setSeedQueueEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSeedQueueEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setSeedQueueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSeedQueueSize(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setIdleQueueLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIdleQueueLimited(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setIdleQueueLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIdleQueueLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setDownloadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDownloadSpeedLimited(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setDownloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDownloadSpeedLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setUploadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUploadSpeedLimited(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setUploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUploadSpeedLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setAlternativeSpeedLimitsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAlternativeSpeedLimitsEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setAlternativeDownloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAlternativeDownloadSpeedLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setAlternativeUploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAlternativeUploadSpeedLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setAlternativeSpeedLimitsScheduled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAlternativeSpeedLimitsScheduled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setAlternativeSpeedLimitsBeginTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  QTime *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QTime");
    return ;
  }
  const jmethodID id = jenv->GetMethodID(jenv->GetObjectClass(jarg2), "getTime", "()J");
  const jlong time = jenv->CallLongMethod(jarg2, id);
  QTime arg2_str(QDateTime::fromMSecsSinceEpoch(time).time());
  arg2 = &arg2_str;
  
  (arg1)->setAlternativeSpeedLimitsBeginTime((QTime const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setAlternativeSpeedLimitsEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  QTime *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QTime");
    return ;
  }
  const jmethodID id = jenv->GetMethodID(jenv->GetObjectClass(jarg2), "getTime", "()J");
  const jlong time = jenv->CallLongMethod(jarg2, id);
  QTime arg2_str(QDateTime::fromMSecsSinceEpoch(time).time());
  arg2 = &arg2_str;
  
  (arg1)->setAlternativeSpeedLimitsEndTime((QTime const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setAlternativeSpeedLimitsDays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  libtremotesf::ServerSettings::AlternativeSpeedLimitsDays arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (libtremotesf::ServerSettings::AlternativeSpeedLimitsDays)jarg2; 
  (arg1)->setAlternativeSpeedLimitsDays(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setPeerPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPeerPort(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setRandomPortEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRandomPortEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setPortForwardingEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPortForwardingEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setEncryptionMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  libtremotesf::ServerSettings::EncryptionMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (libtremotesf::ServerSettings::EncryptionMode)jarg2; 
  (arg1)->setEncryptionMode(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setUtpEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUtpEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setPexEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPexEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setDhtEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDhtEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setLpdEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLpdEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setMaximumPeersPerTorrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaximumPeersPerTorrent(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1setMaximumPeersGlobally(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaximumPeersGlobally(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1JniServerSettings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::JniServerSettings *arg1 = (libtremotesf::JniServerSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::JniServerSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1JniRpc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtremotesf::JniRpc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libtremotesf::JniRpc *)new SwigDirector_JniRpc(jenv);
  *(libtremotesf::JniRpc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1serverSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::JniServerSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  result = (libtremotesf::JniServerSettings *)((libtremotesf::JniRpc const *)arg1)->serverSettings();
  *(libtremotesf::JniServerSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5, jboolean jarg6, jboolean jarg7, jbyteArray jarg8, jboolean jarg9, jbyteArray jarg10, jboolean jarg11, jstring jarg12, jstring jarg13, jint jarg14, jint jarg15, jint jarg16) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  QString *arg5 = 0 ;
  bool arg6 ;
  bool arg7 ;
  QByteArray *arg8 = 0 ;
  bool arg9 ;
  QByteArray *arg10 = 0 ;
  bool arg11 ;
  QString *arg12 = 0 ;
  QString *arg13 = 0 ;
  int arg14 ;
  int arg15 ;
  int arg16 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = (int)jarg4; 
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg5_pstr = jenv->GetStringChars(jarg5, 0);
  if (!arg5_pstr) return ;
  jsize arg5_len = jenv->GetStringLength(jarg5);
  QString arg5_str(QString::fromUtf16(arg5_pstr, arg5_len));
  arg5 = &arg5_str;
  jenv->ReleaseStringChars(jarg5, arg5_pstr);
  
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QByteArray");
    return ;
  }
  jbyte* arg8_pstr = jenv->GetByteArrayElements(jarg8, 0);
  if (!arg8_pstr) return ;
  jsize arg8_len = jenv->GetArrayLength(jarg8);
  QByteArray arg8_str(QByteArray::fromRawData(reinterpret_cast<const char*>(arg8_pstr), arg8_len));
  arg8 = &arg8_str;
  
  arg9 = jarg9 ? true : false; 
  
  if(!jarg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QByteArray");
    return ;
  }
  jbyte* arg10_pstr = jenv->GetByteArrayElements(jarg10, 0);
  if (!arg10_pstr) return ;
  jsize arg10_len = jenv->GetArrayLength(jarg10);
  QByteArray arg10_str(QByteArray::fromRawData(reinterpret_cast<const char*>(arg10_pstr), arg10_len));
  arg10 = &arg10_str;
  
  arg11 = jarg11 ? true : false; 
  
  if(!jarg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg12_pstr = jenv->GetStringChars(jarg12, 0);
  if (!arg12_pstr) return ;
  jsize arg12_len = jenv->GetStringLength(jarg12);
  QString arg12_str(QString::fromUtf16(arg12_pstr, arg12_len));
  arg12 = &arg12_str;
  jenv->ReleaseStringChars(jarg12, arg12_pstr);
  
  
  if(!jarg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg13_pstr = jenv->GetStringChars(jarg13, 0);
  if (!arg13_pstr) return ;
  jsize arg13_len = jenv->GetStringLength(jarg13);
  QString arg13_str(QString::fromUtf16(arg13_pstr, arg13_len));
  arg13 = &arg13_str;
  jenv->ReleaseStringChars(jarg13, arg13_pstr);
  
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  arg16 = (int)jarg16; 
  (arg1)->setServer((QString const &)*arg2,(QString const &)*arg3,arg4,(QString const &)*arg5,arg6,arg7,(QByteArray const &)*arg8,arg9,(QByteArray const &)*arg10,arg11,(QString const &)*arg12,(QString const &)*arg13,arg14,arg15,arg16);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1resetServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  (arg1)->resetServer();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  (arg1)->connect();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  (arg1)->disconnect();
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1backgroundUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  result = (bool)((libtremotesf::JniRpc const *)arg1)->backgroundUpdate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setBackgroundUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setBackgroundUpdate(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1isUpdateDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  result = (bool)((libtremotesf::JniRpc const *)arg1)->isUpdateDisabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setUpdateDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUpdateDisabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1addTorrentFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jintArray jarg4, jintArray jarg5, jintArray jarg6, jintArray jarg7, jintArray jarg8, jint jarg9, jboolean jarg10) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QByteArray *arg2 = 0 ;
  QString *arg3 = 0 ;
  QVariantList *arg4 = 0 ;
  QVariantList *arg5 = 0 ;
  QVariantList *arg6 = 0 ;
  QVariantList *arg7 = 0 ;
  QVariantList *arg8 = 0 ;
  int arg9 ;
  bool arg10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QByteArray");
    return ;
  }
  jbyte* arg2_pstr = jenv->GetByteArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QByteArray arg2_str(QByteArray::fromRawData(reinterpret_cast<const char*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg4_pstr = jenv->GetIntArrayElements(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetArrayLength(jarg4);
  QVariantList arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back(arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseIntArrayElements(jarg4, arg4_pstr, 0);
  
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg5_pstr = jenv->GetIntArrayElements(jarg5, 0);
  if (!arg5_pstr) return ;
  jsize arg5_len = jenv->GetArrayLength(jarg5);
  QVariantList arg5_str;
  if (arg5_len) {
    arg5_str.reserve(arg5_len);
    for (jsize i = 0; i < arg5_len; ++i) {
      arg5_str.push_back(arg5_pstr[i]);
    }
  }
  arg5 = &arg5_str;
  jenv->ReleaseIntArrayElements(jarg5, arg5_pstr, 0);
  
  
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg6_pstr = jenv->GetIntArrayElements(jarg6, 0);
  if (!arg6_pstr) return ;
  jsize arg6_len = jenv->GetArrayLength(jarg6);
  QVariantList arg6_str;
  if (arg6_len) {
    arg6_str.reserve(arg6_len);
    for (jsize i = 0; i < arg6_len; ++i) {
      arg6_str.push_back(arg6_pstr[i]);
    }
  }
  arg6 = &arg6_str;
  jenv->ReleaseIntArrayElements(jarg6, arg6_pstr, 0);
  
  
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg7_pstr = jenv->GetIntArrayElements(jarg7, 0);
  if (!arg7_pstr) return ;
  jsize arg7_len = jenv->GetArrayLength(jarg7);
  QVariantList arg7_str;
  if (arg7_len) {
    arg7_str.reserve(arg7_len);
    for (jsize i = 0; i < arg7_len; ++i) {
      arg7_str.push_back(arg7_pstr[i]);
    }
  }
  arg7 = &arg7_str;
  jenv->ReleaseIntArrayElements(jarg7, arg7_pstr, 0);
  
  
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg8_pstr = jenv->GetIntArrayElements(jarg8, 0);
  if (!arg8_pstr) return ;
  jsize arg8_len = jenv->GetArrayLength(jarg8);
  QVariantList arg8_str;
  if (arg8_len) {
    arg8_str.reserve(arg8_len);
    for (jsize i = 0; i < arg8_len; ++i) {
      arg8_str.push_back(arg8_pstr[i]);
    }
  }
  arg8 = &arg8_str;
  jenv->ReleaseIntArrayElements(jarg8, arg8_pstr, 0);
  
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->addTorrentFile((QByteArray const &)*arg2,(QString const &)*arg3,(QVariantList const &)*arg4,(QVariantList const &)*arg5,(QVariantList const &)*arg6,(QVariantList const &)*arg7,(QVariantList const &)*arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1addTorrentLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jboolean jarg5) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->addTorrentLink((QString const &)*arg2,(QString const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1startTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->startTorrents((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1startTorrentsNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->startTorrentsNow((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1pauseTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->pauseTorrents((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1removeTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QVariantList *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  arg3 = jarg3 ? true : false; 
  (arg1)->removeTorrents((QVariantList const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1checkTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->checkTorrents((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1moveTorrentsToTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->moveTorrentsToTop((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1moveTorrentsUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->moveTorrentsUp((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1moveTorrentsDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->moveTorrentsDown((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1moveTorrentsToBottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QVariantList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg2_pstr = jenv->GetIntArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QVariantList arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back(arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseIntArrayElements(jarg2, arg2_pstr, 0);
  
  (arg1)->moveTorrentsToBottom((QVariantList const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jboolean jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = jarg4 ? true : false; 
  (arg1)->setTorrentLocation(arg2,(QString const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1getTorrentFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->getTorrentFiles(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1getTorrentPeers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->getTorrentPeers(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1renameTorrentFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  QString arg4_str(QString::fromUtf16(arg4_pstr, arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  (arg1)->renameTorrentFile(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1getDownloadDirFreeSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  (arg1)->getDownloadDirFreeSpace();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1getFreeSpaceForPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->getFreeSpaceForPath((QString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentDownloadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  bool arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTorrentDownloadSpeedLimited(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentDownloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  int arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (int)jarg3; 
  (arg1)->setTorrentDownloadSpeedLimit(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentUploadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  bool arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTorrentUploadSpeedLimited(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentUploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  int arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (int)jarg3; 
  (arg1)->setTorrentUploadSpeedLimit(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentRatioLimitMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  libtremotesf::Torrent::RatioLimitMode arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (libtremotesf::Torrent::RatioLimitMode)jarg3; 
  (arg1)->setTorrentRatioLimitMode(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentRatioLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  float arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (float)jarg3; 
  (arg1)->setTorrentRatioLimit(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentPeersLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  int arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (int)jarg3; 
  (arg1)->setTorrentPeersLimit(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentHonorSessionLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  bool arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTorrentHonorSessionLimits(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentBandwidthPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  libtremotesf::Torrent::Priority arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (libtremotesf::Torrent::Priority)jarg3; 
  (arg1)->setTorrentBandwidthPriority(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentIdleSeedingLimitMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  libtremotesf::Torrent::IdleSeedingLimitMode arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (libtremotesf::Torrent::IdleSeedingLimitMode)jarg3; 
  (arg1)->setTorrentIdleSeedingLimitMode(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentIdleSeedingLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  int arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (int)jarg3; 
  (arg1)->setTorrentIdleSeedingLimit(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentFilesEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  bool arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTorrentFilesEnabled(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentFilesWanted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3, jboolean jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  QVariantList *arg3 = 0 ;
  bool arg4 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg3_pstr = jenv->GetIntArrayElements(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetArrayLength(jarg3);
  QVariantList arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back(arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseIntArrayElements(jarg3, arg3_pstr, 0);
  
  arg4 = jarg4 ? true : false; 
  (arg1)->setTorrentFilesWanted(arg2,(QVariantList const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentFilesPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3, jint jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  QVariantList *arg3 = 0 ;
  libtremotesf::TorrentFile::Priority arg4 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg3_pstr = jenv->GetIntArrayElements(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetArrayLength(jarg3);
  QVariantList arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back(arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseIntArrayElements(jarg3, arg3_pstr, 0);
  
  arg4 = (libtremotesf::TorrentFile::Priority)jarg4; 
  (arg1)->setTorrentFilesPriority(arg2,(QVariantList const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1torrentRenameFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  QString arg4_str(QString::fromUtf16(arg4_pstr, arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  (arg1)->torrentRenameFile(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1torrentAddTracker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  QString *arg3 = 0 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  (arg1)->torrentAddTracker(arg2,(QString const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1torrentSetTracker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  int arg3 ;
  QString *arg4 = 0 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (int)jarg3; 
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  QString arg4_str(QString::fromUtf16(arg4_pstr, arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  (arg1)->torrentSetTracker(arg2,arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1torrentRemoveTrackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  QVariantList *arg3 = 0 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QVariantList");
    return ;
  }
  jint* arg3_pstr = jenv->GetIntArrayElements(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetArrayLength(jarg3);
  QVariantList arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back(arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseIntArrayElements(jarg3, arg3_pstr, 0);
  
  (arg1)->torrentRemoveTrackers(arg2,(QVariantList const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentPeersEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::Torrent *arg2 = (libtremotesf::Torrent *) 0 ;
  bool arg3 ;
  std::shared_ptr< libtremotesf::Torrent > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  libtremotesf::Torrent > **)&jarg2;
  arg2 = (libtremotesf::Torrent *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTorrentPeersEnabled(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onAboutToDisconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onAboutToDisconnect();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onAboutToDisconnectSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onAboutToDisconnectSwigPublic();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onConnectedChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onConnectedChanged();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onConnectedChangedSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onConnectedChangedSwigPublic();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onStatusChanged();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onStatusChangedSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onStatusChangedSwigPublic();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onErrorChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onErrorChanged();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onErrorChangedSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onErrorChangedSwigPublic();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentsUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentsUpdated();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentsUpdatedSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentsUpdatedSwigPublic();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onServerStatsUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onServerStatsUpdated();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onServerStatsUpdatedSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onServerStatsUpdatedSwigPublic();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  QString arg4_str(QString::fromUtf16(arg4_pstr, arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentAdded(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentAddedSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  QString arg4_str(QString::fromUtf16(arg4_pstr, arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentAddedSwigPublic(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  QString arg4_str(QString::fromUtf16(arg4_pstr, arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentFinished(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentFinishedSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  QString arg4_str(QString::fromUtf16(arg4_pstr, arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentFinishedSwigPublic(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentAddDuplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentAddDuplicate();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentAddDuplicateSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentAddDuplicateSwigPublic();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentAddError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentAddError();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentAddErrorSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentAddErrorSwigPublic();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onGotTorrentFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onGotTorrentFiles(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onGotTorrentFilesSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onGotTorrentFilesSwigPublic(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentFileRenamed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  QString arg4_str(QString::fromUtf16(arg4_pstr, arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentFileRenamed(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentFileRenamedSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  QString arg3_str(QString::fromUtf16(arg3_pstr, arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  QString arg4_str(QString::fromUtf16(arg4_pstr, arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentFileRenamedSwigPublic(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onGotTorrentPeers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onGotTorrentPeers(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onGotTorrentPeersSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onGotTorrentPeersSwigPublic(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onGotDownloadDirFreeSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  long long arg2 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (long long)jarg2; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onGotDownloadDirFreeSpace(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onGotDownloadDirFreeSpaceSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  long long arg2 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (long long)jarg2; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onGotDownloadDirFreeSpaceSwigPublic(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onGotFreeSpaceForPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QString *arg2 = 0 ;
  bool arg3 ;
  long long arg4 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  arg4 = (long long)jarg4; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onGotFreeSpaceForPath((QString const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onGotFreeSpaceForPathSwigExplicitJniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QString *arg2 = 0 ;
  bool arg3 ;
  long long arg4 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QString");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  QString arg2_str(QString::fromUtf16(arg2_pstr, arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  arg4 = (long long)jarg4; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onGotFreeSpaceForPathSwigPublic((QString const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1JniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  libtremotesf::JniRpc *obj = *((libtremotesf::JniRpc **)&objarg);
  (void)jcls;
  SwigDirector_JniRpc *director = dynamic_cast<SwigDirector_JniRpc *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  libtremotesf::JniRpc *obj = *((libtremotesf::JniRpc **)&objarg);
  SwigDirector_JniRpc *director = dynamic_cast<SwigDirector_JniRpc *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1JniWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::JniWrapper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  result = (libtremotesf::JniWrapper *)new libtremotesf::JniWrapper(arg1);
  *(libtremotesf::JniWrapper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1JniWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::JniWrapper *arg1 = (libtremotesf::JniWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::JniWrapper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettings_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtremotesf::ServerSettings **)&baseptr = *(libtremotesf::JniServerSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtremotesf::Rpc **)&baseptr = *(libtremotesf::JniRpc **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[15] = {
    {
      "SwigDirector_JniRpc_onAboutToDisconnect", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onConnectedChanged", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onStatusChanged", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onErrorChanged", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentsUpdated", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onServerStatsUpdated", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentAdded", "(Lorg/equeim/libtremotesf/JniRpc;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentFinished", "(Lorg/equeim/libtremotesf/JniRpc;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentAddDuplicate", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentAddError", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onGotTorrentFiles", "(Lorg/equeim/libtremotesf/JniRpc;I)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentFileRenamed", "(Lorg/equeim/libtremotesf/JniRpc;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_JniRpc_onGotTorrentPeers", "(Lorg/equeim/libtremotesf/JniRpc;I)V" 
    },
    {
      "SwigDirector_JniRpc_onGotDownloadDirFreeSpace", "(Lorg/equeim/libtremotesf/JniRpc;J)V" 
    },
    {
      "SwigDirector_JniRpc_onGotFreeSpaceForPath", "(Lorg/equeim/libtremotesf/JniRpc;Ljava/lang/String;ZJ)V" 
    }
  };
  Swig::jclass_libtremotesfJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_libtremotesfJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

